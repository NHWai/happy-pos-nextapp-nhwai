generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addon_categories {
  id                     Int                      @id @default(autoincrement())
  name                   String
  is_required            Boolean?                 @default(false)
  addons                 addons[]
  menus_addon_categories menus_addon_categories[]
}

model addons {
  id                  Int              @id @default(autoincrement())
  name                String
  price               Int
  is_available        Boolean?         @default(true)
  addon_categories_id Int
  addon_categories    addon_categories @relation(fields: [addon_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id        Int         @id @default(autoincrement())
  name      String
  address   String      @default("Default address")
  locations locations[]
  users     users[]
}

model discount {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
}

model locations {
  id              Int               @id @default(autoincrement())
  name            String
  address         String
  companies_id    Int
  companies       companies         @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus_locations menus_locations[]
}

model menu_categories {
  id                    Int                     @id @default(autoincrement())
  name                  String
  menus_menu_categories menus_menu_categories[]
}

model menus {
  id                     Int                      @id @default(autoincrement())
  name                   String
  price                  Int
  asset_url              String?
  description            String?
  menus_addon_categories menus_addon_categories[]
  menus_locations        menus_locations[]
  menus_menu_categories  menus_menu_categories[]
}

model menus_addon_categories {
  id                  Int               @id @default(autoincrement())
  menus_id            Int?
  addon_categories_id Int?
  addon_categories    addon_categories? @relation(fields: [addon_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus               menus?            @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menus_locations {
  id           Int       @id @default(autoincrement())
  menus_id     Int
  locations_id Int
  is_available Boolean?  @default(true)
  locations    locations @relation(fields: [locations_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus        menus     @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menus_menu_categories {
  id                 Int              @id(map: "menu_menu_categories_pkey") @default(autoincrement())
  menus_id           Int?
  menu_categories_id Int?
  menu_categories    menu_categories? @relation(fields: [menu_categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menu_menu_categories_menu_categories_id_fkey")
  menus              menus?           @relation(fields: [menus_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menu_menu_categories_menus_id_fkey")
}

model users {
  id           Int       @id @default(autoincrement())
  name         String
  email        String
  password     String
  companies_id Int
  companies    companies @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role         Role      @default(user)
}

enum Role {
  user
  admin
}
